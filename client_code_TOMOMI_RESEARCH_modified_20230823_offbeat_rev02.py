import socketimport jsonimport timeimport random# ClientConnection Classclass ClientConnection:    """Manages a client connection to a server for monitoring and control.    Attributes:        server_ip (str): The IP address of the server.        port (int): The port number for the server.        socket (socket.socket): The socket object for communication.        monitoring (bool): Indicates if monitoring is active.    """    def __init__(self, server_ip, port):        """        Args:            server_ip (str): The IP address of the server.            port (int): The port number for the server.        """        self.server_ip = server_ip        self.port = port        self.socket = None        self.monitor_thread = None        self.monitoring = False    def connect(self):        """Establishes a connection to the server."""        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        self.socket.connect((self.server_ip, self.port))    def disconnect(self):        """Disconnects from the server and stops monitoring."""        self.monitoring = False        if self.monitor_thread:            self.monitor_thread.join()            self.monitor_thread = None        if self.socket:            self.socket.close()            self.socket = None    def send_command(self, command, arg=None):        """Sends a command to the server and receives a response.        Args:            command (str): The command to send.            arg (optional): Additional argument for the command.        Returns:            response: The response from the server.        """        if not self.socket:            raise Exception("Not connected to the server.")        data = {"command": command}        if arg is not None:            data["arg"] = arg        message = json.dumps(data).encode()        # self.socket.send(message)        print("send data: {}".format(message))        self.socket.sendall(message)        res = self.socket.recv(1024).decode()        # response = json.loads(res)['message']        if command in ['GET_READY_STATUS', 'GET_STATUS']:  # この時だけjsonを返します。他は数字のみ            response = json.loads(res)        else:            response = int(res)        return response    def read(self):        """Reads basic connection information.       Returns:           dict: Dictionary containing server IP and port.       """        return {            "server_ip": self.server_ip,            "port": self.port        }    def analyze_response(self, command, response):        """Analyzes the server response based on the command sent.        Args:            command (str): The command that was sent.            response: The response received from the server.        Returns:            str or dict: Analyzed result based on the command and response.        """        if command in ['GET_READY_STATUS', 'ZERO_RETURN']:            return "OK" if response == 1 else "NG"        elif command in ['CARRY_DRIVER_BIT', 'ROTATE', 'REVERSE', 'INSPECTION_FINISHED OK', 'INSPECTION_FINISHED NG']:            if response == 1:                return "Normal"            elif response == 0:                return "Error"            elif response == -1:                return "Emergency Stop"        elif command == 'GET_STATUS':            return response  # This is already a dictionary with the system status        else:            return None  # For any other unexpected command    def check_response(self, command, response, error_message):        """Checks the server response and prints an error message if necessary.        Args:            command (str): The command that was sent.            response: The response received from the server.            error_message (str): The error message to print if the check fails.        Returns:            bool: True if the response is OK, False otherwise.        """        action = self.analyze_response(command, response)        if action in ["NG", "Error", "Emergency Stop"]:            print(error_message)            return False        return True    def monitor_status(self):        """Monitors the system status by sending a 'GET_STATUS' command to the server.        Returns:            dict: The current system status.        """        status = self.send_command('GET_STATUS')        return status# Original functions and variablesdef capture_image():    # カメラから画像を取得するコードをここに書く    # ここでは、ダミーの画像データを返す    print("Capture Image")    return 'dummy image data'def ai_anomaly_detection(image_data):    # AIによる異常検知のコードをここに書く    # 10回に1回の確率でFalseを返す    print("Anomaly Detection")    if random.randint(1, 10) == 1:        return False    return True# システムの状態を格納するグローバル変数system_status = {    'out_of_work': False,    'error_occurred': False,    'alarm_triggered': False,    'emergency': False,    'message': None}# Main Programif __name__ == '__main__':    # Initialize the client connection    client = ClientConnection("192.168.0.195", 6543) #"192.168.1.110"    client.connect()    # client.start_monitoring() #start monitoring    # --------------------------------------------------------    # Main Program    # --------------------------------------------------------    print('initial system status', system_status)    # 1.3 システム状態のモニタリング    response = client.monitor_status()    system_status.update(response['message']) #system_statusをupdate    print(f'updated system status: {system_status}')  # システム状態を出力    # 1. 初期化プロセス    # 1.1.機構側のReady状態確認    response = client.send_command('GET_READY_STATUS')    print("GET_READY_STATUS returns {}".format(response))    if not client.check_response('GET_READY_STATUS', response, "Initialization failed. Exiting..."):        # システム状態のモニタリング        response = client.monitor_status()        system_status.update(response['message'])#system_statusをupdate        print(f'updated system status: {system_status}')  # システム状態を出力        client.disconnect()        exit()    # 1.2.ロボットの初期化    response = client.send_command('ZERO_RETURN')    if not client.check_response('ZERO_RETURN', response, "Robot initialization failed. Exiting..."):        # システム状態のモニタリング        response = client.monitor_status()        system_status.update(response['message'])  # system_statusをupdate        print(f'updated system status: {system_status}')  # システム状態を出力        client.disconnect()        exit()    # 1.3 最初のシステム状態のモニタリング    status = client.monitor_status()    print(f'System status: {status}')  # システム状態を出力    print(f'updated system status: {system_status}')  # システム状態を出力    # ... その他の計測プロセスなど ...    # --------------------------------------------------------    # 2. 計測プロセス    # ワークがなくなるまで計測プロセスを繰り返す    while True:        if system_status['out_of_work']:            break        AI_result = True        response = client.send_command('CARRY_DRIVER_BIT')        if not client.check_response('CARRY_DRIVER_BIT', response, "Error during CARRY_DRIVER_BIT. Exiting..."):            # システム状態のモニタリング            response = client.monitor_status()            system_status.update(response['message'])  # system_statusをupdate            print(f'updated system status: {system_status}')  # システム状態を出力            break        loop_control = False        # 制御用の変数　        # loop_control = Falseの場合、撮像とAI検査を続けます。        # loop_control = Trueの場合、ループを終了します。        for fwdbwd_counter in range(2):            for rorate_counter in range(6):                # 撮像＆AI検査                image_data = capture_image()                AI_result = ai_anomaly_detection(image_data)                # AI結果がOKの場合                # response = client.send_command('INSPECTION_FINISHED_OK')                # NGの場合ループの外に出る。                if not AI_result:                    response = client.send_command('INSPECTION_FINISHED_NG')                    if not client.check_response('INSPECTION_FINISHED_NG', response,                                                 "AI inspection failed. Exiting..."):                        loop_control = True                        # システム状態のモニタリング                        response = client.monitor_status()                        system_status.update(response['message'])  # system_statusをupdate                        print(f'updated system status: {system_status}')  # システム状態を出力                    break                else:                    # 2.2. モーターの回転指示                    if rorate_counter < (6 - 1):                        # はじめのCARRY..,REVERSE..で角度0になっているのでROTATEせずともよく、ROTATEする全回数は５回                        response = client.send_command('ROTATE')                        if not client.check_response('ROTATE', response, "Error during ROTATE. Exiting..."):                            loop_control = True                            # システム状態のモニタリング                            response = client.monitor_status()                            system_status.update(response['message'])  # system_statusをupdate                            print(f'updated system status: {system_status}')  # システム状態を出力                            break            if loop_control or (not AI_result):                fwdbwd_counter = 2  # to exit all loops                break            # 2.3. ワークの反転指示            if fwdbwd_counter == 0:                response = client.send_command('REVERSE')                if not client.check_response('REVERSE', response, "Error during REVERSE. Exiting..."):                    loop_control = True                    # システム状態のモニタリング                    response = client.monitor_status()                    system_status.update(response['message'])  # system_statusをupdate                    print(f'updated system status: {system_status}')  # システム状態を出力            if loop_control:                break        # 2.4. ワーク排出with判定結果        if (not loop_control) and AI_result:  # 最後の判定がOKの場合のみINSPECTION***を実行する。NGなら既に行われているはず。            response = client.send_command('INSPECTION_FINISHED_OK')            # response = client.send_command('INSPECTION_FINISHED', AI_result)            if not client.check_response('INSPECTION_FINISHED_OK', response,                                         "Error during INSPECTION_FINISHED. Exiting..."):                loop_control = True                # システム状態のモニタリング                response = client.monitor_status()                system_status.update(response['message'])  # system_statusをupdate                print(f'updated system status: {system_status}')  # システム状態を出力        if loop_control:            response = client.send_command('GET_STATUS')            print("GET_STATUS: {}".format(response))            break    client.disconnect()  # 接続close